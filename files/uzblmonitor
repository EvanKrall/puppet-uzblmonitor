#!/usr/bin/env python

import argparse
import ConfigParser
import json
import logging
import os
from pipes import quote
import random
import shutil
import signal
import socket
from subprocess import Popen
import sys
import threading
import time
import urlparse


CONFIG_FILE = "/etc/uzblmonitor.conf"

log = logging.getLogger("uzblmonitor")

CTMPL_FORMAT = """
[uzblmonitor]
mode: {{ key "service/uzblmonitor2/hosts/%(id)s/mode" }}
value: {{ key "service/uzblmonitor2/hosts/%(id)s/value" }}
"""


def clear_directory(directory):
    try:
        shutil.rmtree(directory)
    except OSError:
        pass
    os.mkdir(directory)


def supervise(directory, identity, x, y, width, height):
    clear_directory(directory)
    with open(os.path.join(directory, 'ctmpl'), 'w') as ctmpl:
        ctmpl.write(CTMPL_FORMAT % {'id': identity})

    cmd = ' '.join([
        quote(sys.argv[0]),
        '--background',
        '--x', quote(str(x)),
        '--y', quote(str(y)),
        '--width', quote(str(width)),
        '--height', quote(str(height)),
        '--identity', quote(identity),
    ])
    print repr(cmd)
    return Popen(['consul-template', '--template', "ctmpl:config:%s" % cmd],
                 cwd=directory)


def root(identity, x, y, width, height):
    supervise('uzblmonitor_data', identity, x, y, width, height).wait()


def columns(arg, identity, x, y, width, height):
    clear_directory('left')
    clear_directory('right')
    left = supervise('left', '/'.join([identity, 'left']), x, y, width/2, height)
    right = supervise('right', '/'.join([identity, 'right']), x+width/2, y, width/2, height)
    return max(left.wait(), right.wait())


def rows(arg, identity, x, y, width, height):
    clear_directory('top')
    clear_directory('bottom')
    top = supervise('top', '/'.join([identity, 'top']), x, y, width, height/2)
    bottom = supervise('bottom', '/'.join([identity, 'bottom']), x, y+height/2, width, height/2)
    return max(top.wait(), bottom.wait())


def geometry_string(x, y, width, height):
    return '%dx%d+%d+%d' % (width, height, x, y)


def start_xnest(identity, x, y, width, height):
    order = range(100)
    random.shuffle(order)
    for display in order:
        print "RCHOERCHOEURCHOEUrch DISPLAY %d" % display
        p = Popen(['Xnest', ':%d' % display, '-s', '0,', '-retro', '-geometry',
                   geometry_string(x, y, width, height)])
        # TODO: instead of just assuming things are fine if it hasn't crashed
        # after 1 second, let's
        for _ in range(10):
            if p.poll() is not None:
                break
            time.sleep(0.1)
        else:
            return (p, ':%d' % display)
    raise Exception("ohgodwhat")


def browser(url, identity, x, y, width, height):
    xnest, display = start_xnest(identity, x, y, width, height)
    children = [
        xnest,
        Popen(
            ["/usr/bin/luakit", "--nounique", "-c", "/etc/xdg/luakit/uzblmonitor.lua",
             insert_basic_auth(url)],
            env=dict(os.environ, DISPLAY=display),
        ),
        Popen(
            ['matchbox-window-manager', '-use_titlebar', 'no'],
            env=dict(os.environ, DISPLAY=display)
        ),
    ]
    return max([c.wait() for c in children])


def insert_basic_auth(url, filename="/etc/uzblmonitor-auth.json"):
    with open(filename) as f:
        auth_dict = json.load(f)
        parsed = list(urlparse.urlsplit(url))
        hostname = parsed[1]

        for entry in auth_dict['entries']:
            if hostname == entry['domain']:
                parsed[1] = '%s:%s@%s' % (
                    entry['username'],
                    entry['password'],
                    parsed[1]
                )
                return urlparse.urlunsplit(parsed)

        return url


def terminal(command, identity, x, y, width, height):
    return Popen(['xterm', '-geometry', geometry_string(x, y, width, height),
           '-e', command]).wait()


def main():
    # args:
    # x
    # y
    # width
    # height
    parser = argparse.ArgumentParser()
    parser.add_argument('--background', action='store_true', default=False)
    parser.add_argument('--identity', type=str, default=socket.getfqdn())
    parser.add_argument('--x', type=int, default=0)
    parser.add_argument('--y', type=int, default=0)
    parser.add_argument('--width', type=int, default=1920)
    parser.add_argument('--height', type=int, default=1080)

    args = parser.parse_args()

    if args.background:
        if os.fork():
            # the parent exits
            sys.exit()

    try:
        with open('pidfile') as pf:
            os.kill(int(pf.read()), 15)
    except:
        # no worries if the pidfile doesn't exist, process doesn't exist, etc.
        pass

    with open('pidfile', 'w') as pf:
        pf.write("%d" % os.getpid())

    if os.path.exists('config'):
        config = ConfigParser.RawConfigParser()
        config.read('config')
        func = {
            'url': browser,
            'command': terminal,
            'horizontal-split': rows,
            'vertical-split': columns,
        }[config.get('uzblmonitor', 'mode')]
        sys.exit(func(
            config.get('uzblmonitor', 'value'),
            args.identity,
            args.x,
            args.y,
            args.width,
            args.height,
        ))
    else:
        root(args.identity, args.x, args.y, args.width, args.height)


if __name__ == '__main__':
    main()
