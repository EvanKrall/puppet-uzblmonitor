#!/usr/bin/env python

import ConfigParser
import json
import logging
import os
import os.path
import re
import shutil
import signal
import socket
from subprocess import Popen
import sys
import threading
import time
import urlparse
import tempfile

CONFIG_FILE = "/etc/uzblmonitor.conf"

log = logging.getLogger("uzblmonitor")


class Browser(object):

    p = None
    sock = None
    url = None
    should_stop = False

    def start(self):
        log.info("Starting browser")

        self.should_stop = False

        cmd, env = self.browser_command_env

        self.p = Popen(cmd, env=dict(os.environ, **env), stderr=open(os.devnull, 'w'))
        log.info("Started subprocess %d", self.p.pid)

    def stop(self):
        log.info("Stopping browser")

        self.should_stop = True

    def exit(self):
        if self.p:
            self.p.terminate()
            self.p = None

        if self.sock:
            self.sock.close()
            self.sock = None

    def read_config(self):
        config = ConfigParser.RawConfigParser(allow_no_value=True)
        config.read(CONFIG_FILE)
        return config

    def reload_config(self):
        log.info("Reloading config")
        self.exit()
        self.start()

    def wait_for_stop(self):
        while not self.should_stop:
            time.sleep(1)

        log.info("Received stop notification; exiting")
        self.exit()


class Uzbl(Browser):
    browser_command_env = (["/usr/bin/uzbl-browser"], {})
    socket_format = "/tmp/uzbl_socket_{0}"

    def start(self):
        super(Uzbl, self).start()

        self.sock = self._wait_for_socket()
        self.sock.settimeout(1)
        threading.Thread(target=self._start_socket_reader).start()

        self.send_initial_cmds()
        self.reload_config()

    def reload_config(self):
        log.info("Reloading config")

        if not os.path.isfile(CONFIG_FILE):
            return

        config = self.read_config()
        url = config.get('uzblmonitor', 'url')

        if not url:
            fqdn = socket.getfqdn()
            html = "<h1 style='font-size: 400%'>{0}</h1>".format(fqdn)
            url = """javascript:document.write("{0}")""".format(html)

        if url != self.url:
            self.url = url
            self.update_uzbl()

    def send_cmd(self, cmd):
        log.debug("Sending cmd: %s", cmd)

        while not self.should_stop:
            try:
                self.sock.sendall(cmd + '\n')
                return
            except socket.timeout:
                continue
            except socket.error:
                time.sleep(.5)

    def update_uzbl(self):
        self.send_cmd("set uri={0}".format(self.url))

    def send_initial_cmds(self):
        self.send_cmd("set show_status=0")
        self.send_cmd("set geometry=maximized")

    @property
    def socket_filename(self):
        return self.socket_format.format(self.p.pid)

    def _wait_for_socket(self):
        log.info("Waiting for socket connection")

        while True:
            try:
                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
                sock.connect(self.socket_filename)
                break
            except socket.error:
                time.sleep(.5)

        log.info("Socket connected")

        return sock

    def _start_socket_reader(self):
        while not self.should_stop:
            data = None

            try:
                data = self.sock.recv(1024)
            except socket.timeout:
                continue
            except socket.error:
                time.sleep(.5)
                continue

            if data:
                log.debug("Data from uzbl: %r", data)
            else:
                time.sleep(.5)


class LuaKit(Browser):
    @property
    def browser_command_env(self):
        config = self.read_config()
        url = config.get('uzblmonitor', 'url')

        tempdir = tempfile.mkdtemp()
        self.load_userscripts(config, tempdir)

        print "tempdir %s" % tempdir
        return (
            ["/usr/bin/luakit", "-c", "/etc/xdg/luakit/uzblmonitor.lua", insert_basic_auth(url)],
            {
                "XDG_DATA_HOME": tempdir,
            }
        )

    def load_userscripts(self, config, tempdir):
        target_dir = os.path.join(tempdir, "luakit", "scripts")
        os.makedirs(target_dir)
        try:
            script_source = config.get('uzblmonitor', 'user_scripts')
        except ConfigParser.NoOptionError:
            return
        for filename in os.listdir(script_source):
            source_path = os.path.join(script_source, filename)
            if os.path.isfile(source_path) and filename.endswith(".user.js"):
                shutil.copyfile(
                    src=source_path,
                    dst=os.path.join(target_dir, filename)
                )


class Chrome(Browser):
    @property
    def browser_command_env(self):
        config = self.read_config()
        url = config.get('uzblmonitor', 'url')

        tempdir = tempfile.mkdtemp()
        user_data_dir = os.path.join(tempdir, 'user_data')
        os.mkdir(user_data_dir)
        userscript_args = self.load_userscripts(config, tempdir)

        return (
            [
                "/usr/bin/google-chrome-stable",
                "--user-data-dir=%s" % user_data_dir,
                "--app=%s" % insert_basic_auth(url),
            ] + userscript_args,
            {}
        )

    def load_userscripts(self, config, tempdir):
        extension_dir = os.path.join(tempdir, "userscripts")
        os.mkdir(extension_dir)
        try:
            script_source = config.get('uzblmonitor', 'user_scripts')
        except ConfigParser.NoOptionError:
            return []

        manifest_data = {
            "manifest_version": 2,
            "name": ("uzblmonitor user scripts"),
            "content_scripts": [],
            "version": "1",
        }

        for filename in os.listdir(script_source):
            source_path = os.path.join(script_source, filename)
            if os.path.isfile(source_path) and filename.endswith(".user.js"):
                userscript_path = os.path.join(extension_dir, filename)
                shutil.copyfile(
                    src=source_path,
                    dst=userscript_path,
                )

                with open(userscript_path) as userscript:
                    metadata = parse_userscript_metadata(userscript)
                manifest_data['content_scripts'].append({
                    "exclude_globs": [],
                    "exclude_matches": [],
                    "include_globs": metadata['include'],
                    "js": [filename],
                    "matches": ["http://*/*", "https://*/*"],
                    "run_at": "document_idle"
                })

        with open(os.path.join(extension_dir, "manifest.json"), 'w') as manifest:
            json.dump(manifest_data, manifest)

        return ["--load-extension=%s" % extension_dir]


def parse_userscript_metadata(f):
    lines = f.readlines()
    if not re.match(r"^// ==UserScript==", lines[0]):
        raise ValueError("user script does not start with `// ==UserScript==`")
    retval = {}
    for line in lines[1:]:
        if re.match(r"// ==/UserScript==", line):
            break
        match = re.match(r"// @(\S+)\s+(.*)", line)
        retval.setdefault(match.group(1), []).append(match.group(2))

    return retval


def insert_basic_auth(url, filename="/etc/uzblmonitor-auth.json"):
    with open(filename) as f:
        auth_dict = json.load(f)

    parsed = list(urlparse.urlsplit(url))
    hostname = parsed[1]

    for entry in auth_dict['entries']:
        if hostname == entry['domain']:
            parsed[1] = '%s:%s@%s' % (entry['username'], entry['password'], parsed[1])
            return urlparse.urlunsplit(parsed)

    return url


def set_up_signal_handlers(browser):
    def signal_exit(sig, _):
        log.info("Got signal %d, exiting.", sig)
        browser.stop()

    def signal_reload_config(sig, _):
        log.info("Got signal %d, reloading config.", sig)
        browser.reload_config()

    log.debug("Setting up signal handlers")

    signal.signal(signal.SIGINT, signal_exit)
    signal.signal(signal.SIGTERM, signal_exit)
    signal.signal(signal.SIGHUP, signal_reload_config)


def main():
    logging.basicConfig(level=logging.DEBUG)

    BrowserClass = {
        "uzbl": Uzbl,
        "luakit": LuaKit,
        "google-chrome-stable": Chrome,
    }[sys.argv[1] if len(sys.argv) > 1 else "uzbl"]

    browser = BrowserClass()
    set_up_signal_handlers(browser)
    browser.start()
    browser.wait_for_stop()


if __name__ == '__main__':
    main()
